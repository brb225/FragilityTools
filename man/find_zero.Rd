% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/internal.R
\name{find_zero}
\alias{find_zero}
\title{Find when an increasing function observed with noise crosses x-axis}
\usage{
find_zero(
  f,
  x.init = 10L,
  fz.verbose = FALSE,
  D = 1,
  gamma = 0.6,
  burnin_dur = 16,
  eps = 0.1,
  proj = function(a) a,
  limits = c(1, 9999999)
)
}
\arguments{
\item{f}{a function with one argument}

\item{x.init}{the initial value towards finding the zero of f}

\item{fz.verbose}{a logical value for whether to print status updates while running}

\item{D}{an internal argument controlling the step size in Ruppert-Polyak averaging}

\item{gamma}{the power of n^{-1} in gradient descent}

\item{burnin_dur}{the number of iterations of SGD to burn in before there's checks for
the average to converge}

\item{eps}{a parameter to control the error. The smaller is it, the more precise the
output but the longer the function will take to run.}

\item{proj}{a function to project/map the argument of the function onto the functions domain}

\item{limits}{a length two numeric vector with the first entry being the lower bound and the
second being an upper bound.}
}
\value{
the argument of f which satisfies the desired conditions.
}
\description{
Find the smallest positive integer x-value larger than in initial
value for which an approximately monotonic function f is nonnegative.
This is an internal function used in \code{general.fi.samplesize}. The
argument is increased exponentially until it becomes nonnegative, then
a binary search is performed.
}
\examples{
FragilityTools:::find_zero(function(x) x - 100 + rnorm(1), fz.verbose = FALSE)
}
