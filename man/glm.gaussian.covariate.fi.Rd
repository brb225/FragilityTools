% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/front.R
\name{glm.gaussian.covariate.fi}
\alias{glm.gaussian.covariate.fi}
\title{Calculate a fragility index for a coefficient test in a GLM when modifying another covariate}
\usage{
glm.gaussian.covariate.fi(
  X.regr,
  y.regr,
  fam = binomial(),
  cl = NULL,
  verbose = TRUE,
  q = 0.9,
  alpha = 0.05
)
}
\arguments{
\item{X.regr}{a numeric matrix giving the covariates in the regression. The first column must
contain the covariate which is subject to modification.}

\item{y.regr}{a numeric vector giving the response in the regression, with length equal to the number of rows in X.regr}

\item{fam}{the family in a glm for the regression, by default binomial()}

\item{cl}{A parallel cluster for faster calculation in greedy.fi, by default NULL}

\item{verbose}{a boolean indicating whether to print status updates while running, by default TRUE}

\item{q}{a numeric for the minimum probability of outcome changes, by default .9}

\item{alpha}{a numberic for the significance threshold, by default 0.05}
}
\value{
The output of greedy.fi (a list) with an additional element which has the
per-patient modification likelihood bound, as in the article \link{Generalized fragility index}.
}
\description{
This function returns a fragility index (and accomponying information) for an interesting fragility index
which only modified a randomly observed covariate when testing the coefficient of another covariate such
as an intervention. This is the only example in the package which modified a covariate instead of an
outcome (or response). We assume that the distribution of the covariate is some Gaussian. We accomplish the
fragility measure by putting the covariate in the \code{Y} argument of \code{greedy.fi} and the
outcome in the \code{X} argument together with the intervention status. The function iteratively performs
optimization using the Brent algorithm to find the best single modification for each patient.
}
\examples{
set.seed(1234567890)
n.age <- 200
beta.age <- rep(.2, 3)
x.age <- rnorm(n.age)
z.age <- rbinom(n.age, 1, 1/2)
eta.age <- apply(t(beta.age*t(cbind(1,x.age,z.age))),1,sum)
y.age <- rbinom(n.age, 1, binomial()$linkinv(eta.age))

out <- glm.gaussian.covariate.fi(cbind(x.age, z.age), y.age, q = .7)

}
